/** Усюди використав ключове слово let, а не var бо чогось IDE ругався.*/
/*// Задаю значення для рядка
let str = 'number'
// Додаю числа до рядка
let result = str + 3 + 3;
// Отримую результат (Відповідь Number33. Тут відбуваеться конкатеняція. Рядок str з'єднується спочатку з першою 3, а потім другою.)
console.log(result);*/
/** Це особисто для меня, шо б в майбутньому не шукати якщо забуду))
 Конкатенація - це операція об'єднання рядків чи послідовностей символів.*/

/*// В цьому випадку задаю змінну value, бо null має тип "object", а не "string"
let value = null;
// Додаю value до числа
let result = value + 3;
// Отримую результат (Відповідь 3. Null конвертувався у 0, тому результат виглядає як 0+3.)
console.log(result);*/
/** Конвертація, перетворення одного типу даних в інший.*/

/*// &&, це оператор AND.
let result = 5 && "qwerty";
// Відповідь qwerty, так як console.log виводить значення result. Використовується правий операнд.
console.log(result);*/
/** Значення, яке вважається істинним, може бути не тільки літералом true, але також рядком, числом (крім 0), об'єктом, масивом, функцією та іншими типами.*/

/*// Використовую унарний плюс, який переводе рядок у числа.
let result = +'40' + +'2' + "hillel";
// Числа додаються і ми отримуємо 42. Сума чисел додається до радка і відповідь 42hillel.
console.log(result);*/
/**В мові програмування JavaScript унарний плюс (+) та оператор додавання (+) можуть використовуватися в різних контекстах.
 Унарний плюс (+):
 Використовується для конвертації рядків у числа. Наприклад: let num = +"42"; конвертує рядок '42' в число 42.
 Оператор додавання (+):
 Використовується для виконання арифметичного додавання чисел. Наприклад: let sum = 2 + 3; отримає суму чисел 2 та 3.*/

/*// Рядок '10' автоматично конвертується в число, бо використовуеться оператор віднімання. Таким чином я отримую число 5.
let result = '10' - 5 === 6;
// Відповідь false, так як я використовую оперетар строгого порівняння, то 5 не дорівнює 6.
console.log(result)*/
/** Оператор строгого порівняння порівнює два значення з урахуванням як значень,
  так і типів даних. Якщо обидва операнди мають однаковий тип та однакові значення,
  вираз повертає true. В іншому випадку, він повертає false.*/

/*// Під час данної зачачі я використовую оператор додавання, таким чином true та false конвертуються в числа, а саме в 1 і 0.
let result = true + false;
// Відповідь 1, так як вирез перетворюється в 1+0.
console.log(result);*/

/*// Зараз я намагаюсь відняти рядок від цифри.
let result = '4px' - 3;
// Рядок '4px' не може автоматично конвертуватись у число так як містить літери. Таму відповідь NaN.
console.log(result);*/

/*// Приклад схожий на попередній, але тут не використовується літери в рядку, тому '4' автоматично конвертується в число.
let result = '4' - 3;
// Відповідь 1. Бо завдяки конвертації я отримую приклад 4-3.
console.log(result);*/

/*// В цьому приклаі використовуеться рядок '6' та обчислення в ступені 0.
let result = '6' + 3 ** 0;
// Відповідь 61. (3 ** 0) перетворилось в 1, а '6' є рядком, тому відбулась конкотенація.
console.log(result);*/
/** Оператор (**) позначає операцію піднесення до ступеня. */

/*// Використовую арефметичний оператор ділення.
let result = 12 / '6';
// Відповідь 2. Оператор ділення є арефметичним, тому рядок перевівся в число, бо не має літер і відбулось ділення.
console.log(result);*/

/*// Знову викоростовується конкатенація, рядок '10' додяеться до вираза строгого порівняння.
let result = '10' + (5 === 6);
// Відповідь 10false. Рядок '10' додався до відповіді false.
console.log(result);*/

/*// Використовую порівняння null та порожнього рядка.
let result = null == '';
// В мена відповідь false. Хоча на скільки я розумію має відбутись конвертація і вираз повинен вигладати (0 == 0), таким чином відповідь мае бути true, але мабуть десь помилився.
console.log(result);*/
/** Оператор == виконує приведення типів перед порівнянням, і в даному випадку значення будуть відмінними,
 але може відбутися автоматична конвертація типів. Оператор == порівнює два значення і визначає, чи вони рівні.
 Цей оператор виконує автоматичне приведення типів, щоб зробити порівняння, якщо типи значень відрізняються.*/

/*// Спочатку відбувається дія ділення в дужках, потім 3 підноситься до ступені.
let result = 3 ** (9 / 3);
// Відповідь 27.(9/3=3) таким чином 3 підноситься до ступені 3.
console.log(result);*/

/*// Виконую порівняння булевого значення рядків.
let result = !!'false' == !!'true';
// Відповідь true, так я к 'true' та 'false' є рядками з буквами і їх булеве значення є рівним.
console.log(result);*/

/*// Число 0 дає false але рядок '0' дає true, таким чином отримуємо вираз '0' && 1;
let result = 0 || '0' && 1;
// Відповідь 1. Так як рядок і число 1 має значення true.
console.log(result);*/
/** ||: Цей оператор використовується для виразів, де потрібно отримати true,
 якщо хоча б один з операндів є true.
 Якщо обидва операнди false, то результатом буде false. */

/*// оператор + конвертує null у число 0, в даному випадку false теж конвертуєтья у 0 тому я отримую вираз (0 == 0) < 1;.
let result = (+null == false) < 1;
// Відповідь false. Так як 0 дорівнює нулю то ми отримуемо вираз true < 1, або 1<1, а це помилка.
console.log(result);*/

/*// При використанні оператора && отримує відповідь false. Таким чином маємо вираз false || true.
let result = false && true || true;
// Відповідь ture. Оператор || баче операнду true тому видає таку відповідь.
console.log(result);*/
/** IDE показує помилку!!! Але не розумію чому.*/

/*// В данному прикладі ситуація такаж як і в минулому але скочатку робиться дія (false || true), таким чином отримуємо false && true.
let result = false && (false || true);
// Відповідь false. в цьому випадку оператор && бере перше значення.
console.log(result);*/
/** IDE показує помилку!!! Але не розумію чому.*/


/*// null перетвоюється в 0. 1 в п'ятій ступіні буде 1. Отримую вираз true < 1.
let result = (+null == false) < 1 ** 5;
// Відповідь false. Так як true конвертується в 1 і я маю вираз 1<1, а це не так.
console.log(result);*/
/** IDE показує помилку!!! Але не розумію чому.*/

